<snippet><description>作为工具函数</description><tabTrigger>std-bool 20 tool-fun</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * Boolean 函数的类型转换作用
 * Boolean对象除了可以作为构造函数,还可以单独使用,将任意值转为布尔值.
      这时Boolean就是一个单纯的工具方法.
 */
Boolean(undefined) // false
Boolean(null) // false
Boolean(0) // false
Boolean('') // false
Boolean(NaN) // false

Boolean(1) // true
Boolean('false') // true
Boolean([]) // true
Boolean({}) // true
Boolean(function () {}) // true
Boolean(/foo/) // true
// 下面代码中几种得到true的情况,都值得认真记住.
// 顺便提一下,使用双重的否运算符(!)也可以将任意值转为对应的布尔值.
!!undefined // false
!!null // false
!!0 // false
!!'' // false
!!NaN // false
!!1 // true
!!'false' // true
!![] // true
!!{} // true
!!function(){} // true
!!/foo/ // true
/**
 * 最后,对于一些特殊值,Boolean对象前面加不加new,会得到完全相反的结果,必须小心.
 * 一个返回对象,一个返回布尔值
 */
Boolean(false) // false
typeof Boolean(false) // "boolean"
new Boolean(false) // Boolean { false }
typeof new Boolean(false) // "object"

if (Boolean(false)) {
  console.log('true');
} // 无输出
if (new Boolean(false)) { // 应为所有对象的布尔值 都是 true
  console.log('true');
} // true
if (Boolean(null)) {
  console.log('true');
} // 无输出
if (new Boolean(null)) {
  console.log('true');
} // true
]]></content></snippet>