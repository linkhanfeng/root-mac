<snippet><description>实例方法</description><tabTrigger>std-arr 200 instance-fun</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * (改变原数组)的方法: reverse| sort| splice| push,pop,shift,unshift
 */
/**
 * 1. push(), pop(), unshift(), shift() 改变原数组
 * push() 末端 添加 一个或多个元素 返回length
 * pop() 末端 删除 一个元素 返回该元素
 * unshift() 开头 添加 一个或多个元素 返回length
 * shift() 开头 删除 一个元素 返回该元素
 */
// 1.1 push() 用于在数组的末端添加一个或多个元素,并返回添加新元素后的数组长度
var arr = [];
arr.push(1) // 1
arr.push(true, {}) // 3
arr // [1, true, {}]
// 1.2 pop方法用于删除数组的最后一个元素,并返回该元素
var arr = ['a', 'b', 'c'];
arr.pop() // 'c'
arr // ['a', 'b
// 对空数组使用pop方法,不会报错,而是返回undefined.
[].pop() // undefined
// push和pop结合使用,就构成了“后进先出”的栈结构(stack).
var arr = [];
arr.push(1, 2);
arr.push(3);
arr.pop();
arr // [1, 2]
// 1.3 shift()方法用于删除数组的第一个元素,并返回该元素
var a = ['a', 'b', 'c'];
a.shift() // 'a'
a // ['b', 'c']
// push()和shift()结合使用,就构成了“先进先出”的队列结构(queue).
// 1.4 unshift()方法用于在数组的第一个位置添加元素,并返回添加新元素后的数组长度
var a = ['a'];
a.unshift('x'); // 2
a // ['x', 'a']
a.unshift(1,2) // 4
a // [ 1, 2, 'x', a' ]
/**
 * 2. splice() 替换,删除,增加,截取,  数组元素 (改变原数组)
 * 删除原数组的一部分成员,并可以在删除的位置添加新的数组成员,
       返回值是被删除的元素.注意,该方法会改变原数组.
 * arr.splice(start, count, addElement1, addElement2, ...);
       splice的第一个参数是删除的起始位置(从0开始),且包含当前位置
       第二个参数是被删除的元素个数.
       如果后面还有更多的参数,则表示这些就是要被插入数组的新元素.
 */
// 删除
var a = ['a', 'b', 'c', 'd', 'e', 'f'];
a.splice(1, 2) // ["b", "c"]
a // [ "a", "d", "e", "f" ]
// 替换
var a = ['a', 'b', 'c', 'd', 'e', 'f'];
a.splice(1, 2, 1, 2) // ["b", "c"]
a // [ "a", 1, 2, "d", "e", "f" ]
// 起始位置如果是负数,就表示从倒数位置开始删除. 从 -1 开始,而不是从 0
var a = ['a', 'b', 'c', 'd', 'e', 'f']; // f位置是 -1,e位置是 -2
a.splice(-2, 2) // ["e", "f"]
// 插入  第二个参数可以设为0.
var a = [1, 1, 1];
a.splice(1, 0, 2) // []
a // [1, 2, 1, 1]
a.splice(-1, 0, 3) // []
a // [1, 2, 1, 3, 1]
// 截取 如果只提供第一个参数,等同于将原数组在指定位置截取到末尾
var a = [1, 2, 3, 4];
a.splice(2) // [3, 4]
a // [1, 2]
/**
 * 3. reverse() 颠倒排列数组元素 (改变原数组)
 * 返回改变后的数组.注意,该方法将
 */
var a = ['a', 'b', 'c'];
a.reverse() // ["c", "b", "a"]
a // ["c", "b", "a"]
/**
 * 4. valueOf(),toString()
 */
// valueOf方法是一个所有对象都拥有的方法,表示对该对象求值.
// 不同对象的valueOf方法不尽一致,数组的valueOf方法返回数组本身.
var arr = [1, 2, 3];
arr.valueOf() // [1, 2, 3]
// toString方法也是对象的通用方法,数组的toString方法返回数组的字符串形式.
var arr = [1, 2, 3];
arr.toString() // "1,2,3"
var arr = [1, 2, 3, [4, 5, 6]];
arr.toString() // "1,2,3,4,5,6"
/**
 * 5. join() 连接数组成员为一个字符串
 * 以指定参数作为分隔符,将所有数组成员连接为一个字符串返回.
 * 如果不提供参数,默认用逗号分隔.
 */
var a = [1, 2, 3, 4];
a.join(' | ') // "1 | 2 | 3 | 4"
a.join() // "1,2,3,4"
// 如果数组成员是undefined或null或空位,会被转成空字符串.
[undefined, null].join('#') // '#'
['a',, 'b'].join('-') // 'a--b'
// 通过call方法,这个方法也可以用于字符串或类似数组的对象.
Array.prototype.join.call('hello', '-') // "h-e-l-l-o"
var obj = { 0: 'a', 1: 'b', length: 2 };
Array.prototype.join.call(obj, '-') // 'a-b'
/**
 * 6. concat() 合并数组
 * 它将新数组的成员,添加到原数组成员的后部,然后返回一个新数组,原数组不变.
 */
['hello'].concat(['world']) // ["hello", "world"]
['hello'].concat(['world'], ['!']) // ["hello", "world", "!"]
[].concat({a: 1}, {b: 2}) // [{ a: 1 }, { b: 2 }]
// 除了数组作为参数,concat也接受其他类型的值作为参数,添加到目标数组尾部.
[1, 2, 3].concat(4, 5, 6) // [1, 2, 3, 4, 5, 6]
// 如果数组成员包括对象,concat方法返回当前数组的一个浅拷贝.
// 所谓“浅拷贝”,指的是新数组拷贝的是对象的引用.
var oldArr = [ { a: 1 } ];
var newArr = oldArr.concat();
oldArr[0].a = 2
newArr[0].a; // 2
/**
 * 7. slice() 提取数组的一部分
 * 提取目标数组的一部分,返回一个新数组.
 * arr.slice(start, end);
       它的第一个参数为起始位置(从0开始),
       第二个参数为终止位置(但该位置的元素本身不包括在内).
       如果省略第二个参数,则一直返回到原数组的最后一个成员.
 */
var a = ['a', 'b', 'c'];
a.slice() // ["a", "b", "c"]
a.slice(0) // ["a", "b", "c"]
a.slice(1) // ["b", "c"]
a.slice(1, 2) // ["b"]
a.slice(2, 6) // ["c"]
// -2表示倒数计算的第二个位置,-1表示倒数计算的第一个位置.
var a = ['a', 'b', 'c'];
a.slice(-2) // ["b", "c"]
a.slice(-2, -1) // ["b"]
// 如果第一个参数大于等于数组长度,或者第二个参数小于第一个参数,则返回空数组.
var a = ['a', 'b', 'c'];
a.slice(4) // []
a.slice(2, 1) // []
// slice方法的一个重要应用,是将类似数组的对象转为真正的数组.
Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 }) // ['a', 'b']
Array.prototype.slice.call(document.querySelectorAll("div"));
Array.prototype.slice.call(arguments);
/**
* 8. sort()
* 对数组成员进行排序,默认是按照字典顺序排序.排序后,原数组将被改变.
* 需要特殊注意.sort方法不是按照大小排序,而是按照字典顺序.
      也就是说,数值会被先转成字符串,
      再按照字典顺序进行比较,所以101排在11的前面.
 */
['d', 'c', 'b', 'a'].sort() // ['a', 'b', 'c', 'd']
[4, 3, 2, 1].sort() // [1, 2, 3, 4]
[11, 101].sort() // [101, 11]
[10111, 1101, 111].sort() // [10111, 1101, 111]
// 如果想让sort方法按照自定义方式排序,可以传入一个函数作为参数.
[10111, 1101, 111].sort(function (a, b) {
  return a - b;
})
// [111, 1101, 10111]
// 上面代码中,sort的参数函数本身接受两个参数,表示进行比较的两个数组成员.
// 如果该函数的返回值大于0,表示第一个成员排在第二个成员后面;
// 其他情况下,都是第一个元素排在第二个元素前面.
var obj = [ { name: "张三", age: 30 }, { name: "李四", age: 24 },{ name: "王五", age: 28  } ]
obj.sort(function (o1, o2) {
  return o1.age - o2.age;
}) // [ { name: "李四", age: 24 }, { name: "王五", age: 28  }, { name: "张三", age: 30 } ]
/**
 * 9. map() 处理所有成员,返回处理后的数组
 * 将数组的所有成员依次传入参数函数,然后把每一次的执行结果组成一个新数组返回.
 * 可以接受两个参数,
       第一个参数是一个闭包函数
       第二个参数是任意值,指向回调函数内部的 this对象
 */
// 第一个闭包参数,只有一个参数时,当前成员
var numbers = [1, 2, 3];
var mapedNum = numbers.map(function (n) {
  return n + 1;
}); // [2, 3, 4]
mapedNum // [2, 3, 4]
numbers // [1, 2, 3]
// 第一个闭包参数,有三个参数时: 当前成员, 当前位置和数组本身.
[1, 2, 3].map(function(elem, index, arr) {
  return elem * index;
}); // [0, 2, 6]
// map方法还可以接受 第二个参数,
// 用来绑定回调函数内部的this变量(详见《this 变量》一章).
var arr = ['a', 'b', 'c'];
[1, 2].map(function (e) {
  return this[e]; // 回调函数内部的this对象,指向arr数组.
}, arr) // ['b', 'c']
// 如果数组有空位,map方法的回调函数在这个位置不会执行,会跳过数组的空位.
// 上面代码中,map方法不会跳过undefined和null,但是会跳过空位.
var f = function (n) { return 'a' };
[1, undefined, 2].map(f) // ["a", "a", "a"]
[1, null, 2].map(f) // ["a", "a", "a"]
[1, , 2].map(f) // ["a", , "a"]
/**
 * 10. forEach()
 * 方法与map方法很相似,也是对数组的所有成员依次执行参数函数.
       但是,forEach方法不返回值,只用来操作数据.
       这就是说,如果数组遍历的目的是为了得到返回值,那么使用map方法,否则使用forEach方法.
 * forEach的用法与map方法一致,
       参数是一个函数,该函数同样接受三个参数:当前值, 当前位置, 整个数组.
 * 注意: forEach 方法无法中断执行,总是会将所有成员遍历完.
       如果希望符合某种条件时,就中断遍历,要使用for循环.
 */
// 下面代码中,遍历数组不是为了得到返回值,而是为了在屏幕输出内容,所以不必使用map方法.
function log(element, index, array) {
  console.log('[' + index + '] = ' + element);
}
[2, 5].forEach(log); // [0] = 2 [1] = 5
// forEach方法也可以接受第二个参数,绑定参数函数的this变量.
var out = [];
[1, 2, 3].forEach(function(elem) {
  this.push(elem * elem);
}, out);
out // [1, 4, 9]
// forEach方法也会跳过数组的空位.
// forEach方法不会跳过undefined和null,但会跳过空位.
var log = function (n) { console.log(n + 1); }
[1, undefined, 2].forEach(log) // 2 NaN 3
[1, null, 2].forEach(log) // 2, 1, 3
[1, , 2].forEach(log) // 2, 3
/**
 * 11. filter() 过滤数组成员
 * 用于过滤数组成员,满足条件的成员组成一个新数组返回.
 * 它的参数是一个函数,所有数组成员依次执行该函数,
      返回结果为true的成员组成一个新数组返回
 */
// 下面代码将大于3的数组成员,作为一个新数组返回.
[1, 2, 3, 4, 5].filter(function (elem) {
  return (elem > 3);
}) // [4, 5]
// 下面代码中,filter方法返回数组arr里面所有布尔值为true的成员.
var arr = [0, 1, 'a', false];
arr.filter(Boolean) // [1, "a"]
// filter方法的参数函数可以接受三个参数:当前成员,当前位置和整个数组.
[1, 2, 3, 4, 5].filter(function (elem, index, arr) {
  return index % 2 === 0;
}); // [1, 3, 5]
// filter方法还可以接受第二个参数,用来绑定参数函数内部的this变量.
var obj = { MAX: 3 };
var myFilter = function (item) {
  if (item > this.MAX) return true;
};
var arr = [2, 8, 3, 4, 1, 3, 2, 9];
arr.filter(myFilter, obj) // [8, 4, 9]
/**
 * 12. some(),every()
 * 这两个方法类似“断言”(assert),返回一个布尔值,表示判断数组成员是否符合某种条件.
 * 它们接受一个函数作为参数,所有数组成员依次执行该函数.
      该函数接受三个参数:当前成员, 当前位置和整个数组,然后返回一个布尔值.
 * some方法是只要一个成员的返回值是true,则整个some方法的返回值就是true,否则返回false.
 * every方法是所有成员的返回值都是true,整个every方法才返回true,否则返回false.
 * some和every方法还可以接受第二个参数,用来绑定参数函数内部的 this 变量.
 */
// some
var arr = [1, 2, 3, 4, 5];
arr.some(function (elem, index, arr) {
  return elem >= 3;
}); // true
var arr = [1, 2, 3, 4, 5];
// every
arr.every(function (elem, index, arr) {
  return elem >= 3;
}); // false
// 注意,对于空数组,some方法返回false,every方法返回true,回调函数都不会执行.
function isEven(x) { return x % 2 === 0 }
[].some(isEven) // false
[].every(isEven) // true
/**
 * 13. reduce(),reduceRight()
 * reduce()和reduceRight()依次处理数组的每个成员,最终累计为一个值.
      它们的差别是,reduce是从左到右处理(从第一个成员到最后一个成员),
      reduceRight则是从右到左(从最后一个成员到第一个成员),其他完全一样.
 * reduce方法和reduceRight方法的第一个参数都是一个函数.该函数接受以下四个参数.
      这四个参数之中,只有前两个是必须的,后两个则是可选的.
      累积变量,默认为数组的第一个成员
      当前变量,默认为数组的第二个成员
      当前位置(从0开始)
      原数组
 * 下面代码中,reduce方法求出数组所有成员的和.
      第一次执行,a是数组的第一个成员1,b是数组的第二个成员2.
      第二次执行,a为上一轮的返回值3,b为第三个成员3.
      第四次执行,所有成员遍历完成,整个方法的返回值就是最后一轮的返回值15.
 */
[1, 2, 3, 4, 5].reduce(function (a, b) {
  console.log(a, b);
  return a + b;
})
// 1 2
// 3 3
// 6 4
// 10 5
//最后结果:15
// 如果要对累积变量指定初值,可以把它放在reduce方法和reduceRight方法的第二个参数.
[1, 2, 3, 4, 5].reduce(function (a, b) { return a + b;}, 10); // 25
// 上面的第二个参数相当于设定了默认值,处理空数组时尤其有用.
// 下面代码中,由于空数组取不到初始值,reduce方法会报错.这时,加上第二个参数,就能保证总是会返回一个值.
function add(prev, cur) { return prev + cur;}
[].reduce(add) // TypeError: Reduce of empty array with no initial value
[].reduce(add, 0) // 0
下面是一个reduceRight方法的例子.
function substract(prev, cur) { return prev - cur; }
[3, 2, 1].reduce(substract) // 0
[3, 2, 1].reduceRight(substract) // -4
// 实际上还可以用来做一些遍历相关的操作.比如,找出字符长度最长的数组成员.
function findLongest(entries) {
  return entries.reduce(function (longest, curStr) {
    return curStr.length > longest.length ? curStr : longest;
  }, '');
}
findLongest(['aaa', 'bb', 'c']) // "aaa"
// 解析
['aaa', 'bb', 'c'].reduce(function (longest, curStr) {
  console.log(longest,curStr)
  return curStr.length > longest.length ? curStr : longest;
}, 'A');
// A aaa
// aaa bb
// aaa c

/**
 * 14. indexOf(),lastIndexOf()
 * indexOf 方法返回给定元素在数组中第一次出现的位置,如果没有出现则返回-1.
 * lastIndexOf方法返回给定元素在数组中最后一次出现的位置,如果没有出现则返回-1.
 */
var a = ['a', 'b', 'c'];
a.indexOf('b') // 1
a.indexOf('y') // -1
// indexOf方法还可以接受第二个参数,表示搜索的开始位置.
['a', 'b', 'c'].indexOf('a', 1) // -1
// lastIndexOf方法返回给定元素在数组中最后一次出现的位置,如果没有出现则返回-1.
var a = [2, 5, 9, 2];
a.lastIndexOf(2) // 3
a.lastIndexOf(7) // -1
// 注意,这两个方法不能用来搜索NaN的位置,即它们无法确定数组成员是否包含NaN.
// 这是因为这两个方法内部,使用严格相等运算符(===)进行比较,而NaN是唯一一个不等于自身的值.
[NaN].indexOf(NaN) // -1

/**
 * 15. 链式使用
 * 上面这些数组方法之中,有不少返回的还是数组,所以可以链式使用.
 * 下面的代码中,
      先用 map() 产生一个所有 Email 地址组成的数组,
      然后 fileter() 过滤出以t开头的 Email 地址
      最后 forEach 遍历将它打印出来.
 */
var users = [
  {name: 'tom', email: 'tom@example.com'},
  {name: 'peter', email: 'peter@example.com'}
];
users
.map(function (user) {
  return user.email;
})
.filter(function (email) {
  return /^t/.test(email);
})
.forEach(function (email) {
  console.log(email);
});
// "tom@example.com"
]]></content></snippet>