<snippet><description>静态方法</description><tabTrigger>std-obj 40 static-fun</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * 所谓“静态方法”，是指部署在Object对象自身的方法。
 */

/**
 * 1. Object.keys(), Object.getOwnPropertyNames()
 * 这两个方法都用来遍历对象的属性。
     通常用来获取对象属性个数, 因为 JavaScript 没有提供计算对象属性个数的方法
 * Object.keys方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。
 * 对于一般的对象来说，Object.keys()和Object.getOwnPropertyNames()返回的结果是一样的。
     只有涉及不可枚举属性时，才会有不一样的结果。
     数组的length属性是不可枚举的属性，所以只出现在Object.getOwnPropertyNames方法的返回结果中。
 * 一般情况下，几乎总是使用Object.keys方法，遍历数组的属性。
 */
var a = ['Hello', 'World'];

Object.keys(a) // ["0", "1"]
Object.getOwnPropertyNames(a) // ["0", "1", "length"]

// 获取对象属性个数
var b = {p1: 1, p2: 2};
Object.keys(b).length // 2
Object.getOwnPropertyNames(b).length // 2


/**
 * 2. 其他静态方法
 *（1）对象属性模型的相关方法
    Object.getOwnPropertyDescriptor()：获取某个属性的描述对象。
    Object.defineProperty()：通过描述对象，定义某个属性。
    Object.defineProperties()：通过描述对象，定义多个属性。
 *（2）控制对象状态的方法
    Object.preventExtensions()：防止对象扩展。
    Object.isExtensible()：判断对象是否可扩展。
    Object.seal()：禁止对象配置。
    Object.isSealed()：判断一个对象是否可配置。
    Object.freeze()：冻结一个对象。
    Object.isFrozen()：判断一个对象是否被冻结。
 *（3）原型链相关方法
    Object.create()：该方法可以指定原型对象和属性，返回一个新的对象。
    Object.getPrototypeOf()：获取对象的Prototype对象。
 */
]]></content></snippet>