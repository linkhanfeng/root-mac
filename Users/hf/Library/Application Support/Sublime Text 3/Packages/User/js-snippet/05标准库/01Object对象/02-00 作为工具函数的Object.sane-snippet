---
description: 作为工具函数的Object
tabTrigger:  std-obj 10 tool-fun
scope:       source.js
---
// 常用于保证某个值一定是对象
/**
 * Object() 作为 (工具函数) 的用法
 * Object本身是一个函数，可以当作工具方法使用，将任意值转为对象。
     这个方法常用于保证某个值一定是对象。
 */

/**
 * 1. 如果参数为空（或者为undefined和null），Object()返回一个空对象。
 */
var obj = Object();
// 等同于
var obj = Object(undefined);
var obj = Object(null);

obj instanceof Object // true  instanceof运算符用来验证，一个对象是否为指定的构造函数的实例。obj instanceof Object返回true，就表示obj对象是Object的实例。
obj // Object {  }

/**
 * 2. 如果参数是原始类型的值，Object方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。
 */
var obj = Object(1);
obj; // Number { 1 }
obj instanceof Object // true
obj instanceof Number // true

var obj = Object('foo');
obj; // String { "foo" }
obj instanceof Object // true
obj instanceof String // true

var obj = Object(true);
obj; // Boolean { true }
obj instanceof Object // true
obj instanceof Boolean // true

/**
 * 3. 如果Object方法的参数是一个对象，它总是返回该对象，即不转换。
 */
var arr = [];
var obj = Object(arr); // 返回原数组
obj === arr // true

var value = {};
var obj = Object(value) // 返回原对象
obj === value // true

var fn = function () {};
var obj = Object(fn); // 返回原函数
obj === fn // true

// 利用这一点，可以判断变量是否为广义的对象
function isObject(value) {
  return value === Object(value);
}

isObject([]) // true
isObject({}) // true
isObject(true) // false
