---
description: 强制转换为数字
tabTrigger:  gra-conv 21 Number()
scope:       source.js
---
/**
 * （1）原始类型值
 */
// 数值：转换后还是原来的值
Number(324) // 324
// 字符串：如果可以被解析为数值，则转换为相应的数值
Number('324') // 324
// 字符串：如果不可以被解析为数值，返回 NaN
Number('324abc') // NaN
// 空字符串转为0
Number('') // 0
// 布尔值：true 转成 1，false 转成 0
Number(true) // 1
Number(false) // 0
// undefined：转成 NaN
Number(undefined) // NaN
// null：转成0
Number(null) // 0

/**
 * 与 parseInt() 的区别, parseInt逐个解析字符
     而Number函数整体转换字符串的类型,只要有一个字符无法转成数值，整个字符串就会被转为NaN。
 */
parseInt('42 cats') // 42
Number('42 cats') // NaN

/**
 * （2）对象
 */
// 简单的规则是，Number方法的参数是对象时，将返回NaN，除非是包含单个数值的数组。
Number({a: 1}) // NaN
Number([1, 2, 3]) // NaN
Number([5]) // 5 包含单个数值的数组
/**
 * 转换规则:
 * 第一步，调用对象自身的valueOf方法。如果返回原始类型的值，则直接对该值使用Number函数，不再进行后续步骤。
 * 第二步，如果valueOf方法返回的还是对象，则改为调用对象自身的toString方法。如果toString方法返回原始类型的值，则对该值使用Number函数，不再进行后续步骤。
 * 第三步，如果toString方法返回的是对象，就报错。
 */

var obj = {x: 1};
Number(obj) // NaN

// 等同于
if (typeof obj.valueOf() === 'object') {
  Number(obj.toString());
} else {
  Number(obj.valueOf());
}
