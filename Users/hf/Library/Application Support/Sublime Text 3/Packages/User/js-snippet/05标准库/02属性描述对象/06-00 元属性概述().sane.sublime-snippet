<snippet><description>元属性概述</description><tabTrigger>std-attr 60 meta-attr</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * 属性描述对象的各个属性称为“元属性”，因为它们可以看作是控制属性的属性。
 */

/**
 * 1. value 属性是目标属性的值。
 * 上面代码是通过value属性，读取或改写obj.p的例子。
 */
var obj = {};
obj.p = 123;
Object.getOwnPropertyDescriptor(obj, 'p').value // 123
Object.defineProperty(obj, 'p', { value: 246 });
obj.p // 246

/**
 * 2. writable 属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。
 */
var obj = {};
Object.defineProperty(obj, 'a', {
  value: 37,
  writable: false // obj.a的writable属性是false。然后，改变obj.a的值，不会有任何效果。
});
obj.a // 37
obj.a = 25;
obj.a // 37

// 注意，正常模式下，对writable为false的属性赋值不会报错，只会默默失败。但是，严格模式下会报错，即使对a属性重新赋予一个同样的值。
'use strict';
var obj = {};
Object.defineProperty(obj, 'a', {
  value: 37,
  writable: false
});
obj.a = 37;
// Uncaught TypeError: Cannot assign to read only property 'a' of object

// 如果原型对象的某个属性的writable为false，那么子对象将无法自定义这个属性。
// 下面代码中，proto是原型对象，它的foo属性不可写。obj对象继承proto，也不可以再自定义这个属性了。如果是严格模式，这样做还会抛出一个错误。
var proto = Object.defineProperty({}, 'foo', {
  value: 'a',
  writable: false
});
var obj = Object.create(proto);
obj.foo = 'b';
obj.foo // 'a'

// 但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。
var proto = Object.defineProperty({}, 'foo', {
  value: 'a',
  writable: false
});
var obj = Object.create(proto);
Object.defineProperty(obj, 'foo', {
  value: 'b'
});
obj.foo // "b"

/**
 * 3. enumerable （可遍历性）返回一个布尔值，表示目标属性是否可遍历。
    JavaScript 的早期版本，for...in循环是基于in运算符的。我们知道，in运算符不管某个属性是对象自身的还是继承的，都会返回true。
    这显然不太合理，后来就引入了“可遍历性”这个概念。
    只有可遍历的属性，才会被for...in循环遍历，
    同时还规定toString这一类实例对象继承的原生属性，都是不可遍历的，这样就保证了for...in循环的可用性。
 * 具体来说，如果一个属性的enumerable为false，下面三个操作不会取到该属性。
    for..in循环
    Object.keys方法
    JSON.stringify方法
    因此，enumerable可以用来设置“秘密”属性。
 */
var obj = {};
'toString' in obj // true toString不是obj对象自身的属性，但是in运算符也返回true，这导致了toString属性也会被for...in循环遍历。

// 设置不可遍历属性
var obj = {};
Object.defineProperty(obj, 'x', {
  value: 123,
  enumerable: false
});
obj.x // 123

for (var key in obj) {
  console.log(key);
}
// undefined
Object.keys(obj)  // []
JSON.stringify(obj) // "{}"

/*
上面代码中，obj.x属性的enumerable为false，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但不是真正的私有属性，还是可以直接获取它的值。
注意，for...in循环包括继承的属性，
    Object.keys方法不包括继承的属性。
    如果需要获取对象自身的所有属性，不管是否可遍历，可以使用Object.getOwnPropertyNames方法。
另外，JSON.stringify方法会排除enumerable为false的属性，有时可以利用这一点。
    如果对象的 JSON 格式输出要排除某些属性，就可以把这些属性的enumerable设为false。
*/

/**
 * 4. configurable(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。
     也就是说，configurable为false时，value、writable、enumerable和configurable都不能被修改了。
 */
 var obj = Object.defineProperty({}, 'p', {
   value: 1,
   writable: false,
   enumerable: false,
   configurable: false
 });

 Object.defineProperty(obj, 'p', {value: 2})
 // TypeError: Cannot redefine property: p

 Object.defineProperty(obj, 'p', {writable: true})
 // TypeError: Cannot redefine property: p

 Object.defineProperty(obj, 'p', {enumerable: true})
 // TypeError: Cannot redefine property: p

 Object.defineProperty(obj, 'p', {configurable: true})
 // TypeError: Cannot redefine property: p

 // 上面代码中，obj.p的configurable为false。然后，改动value、writable、enumerable、configurable，结果都报错。

 // 注意，writable只有在false改为true会报错，true改为false是允许的。
 var obj = Object.defineProperty({}, 'p', {
   writable: true,
   configurable: false
 });
 Object.defineProperty(obj, 'p', {writable: false})
 // 修改成功

 // 至于value，只要writable和configurable有一个为true，就允许改动。
 var o1 = Object.defineProperty({}, 'p', {
   value: 1,
   writable: true,
   configurable: false
 });
 Object.defineProperty(o1, 'p', {value: 2})
 // 修改成功

 var o2 = Object.defineProperty({}, 'p', {
   value: 1,
   writable: false,
   configurable: true
 });
 Object.defineProperty(o2, 'p', {value: 2})
 // 修改成功

 // 另外，configurable为false时，直接目标属性赋值，不报错，但不会成功。
 var obj = Object.defineProperty({}, 'p', {
   value: 1,
   configurable: false
 });
 obj.p = 2;
 obj.p // 1
 // 上面代码中，obj.p的configurable为false，对obj.p赋值是不会生效的。如果是严格模式，还会报错。

 // 可配置性决定了目标属性是否可以被删除（delete）。
 var obj = Object.defineProperties({}, {
   p1: { value: 1, configurable: true },
   p2: { value: 2, configurable: false }
 });
 delete obj.p1 // true
 delete obj.p2 // false
 obj.p1 // undefined
 obj.p2 // 2

 // 上面代码中，obj.p1的configurable是true，所以可以被删除，obj.p2就无法删除。
]]></content></snippet>