---
description: 作为构造函数的Array
tabTrigger:  std-arr 100 constructor-fun
scope:       source.js
---
/**
 * 概述:
 * Array 作为构造函数,可以用它生成新的数组. // var arr = new Array(3);
 * Array 对象的原生方法分成两类:
       静态方法: 本身的方法,就是直接定义在Array对象的方法,只有1个
       实例方法: 定义在 Array.prototype 上的方法,大概15个
 */
// 构造函数
var arr = new Array(3);
arr.length // 2
arr // Array(3) [ <3 empty slots> ] 表示生成一个两个成员的数组,都是空值
// 如果没有使用new,运行结果也是一样的.
var arr = Array(3);
/**
 * Array构造函数有一个很大的缺陷,就是不同的参数,会导致它的行为不一致.
 * 可以看到,Array作为构造函数,行为很不一致.因此,不建议使用它生成新数组,
       直接使用数组字面量是更好的做法
 */
new Array() // [] 无参数时,返回一个空数组
new Array(1) // Array [ <1 empty slot> ] 单个正整数参数,表示返回的新数组的长度
new Array(3.2) // RangeError: Invalid array length 非正整数的数值作为参数,会报错
new Array(-3) // RangeError: Invalid array length
// 单个非数值(比如字符串,对象等)作为参数, 则该参数是返回的新数组的成员
new Array('abc') // ['abc']
new Array([1]) // [Array[1]]
// 多参数时,所有参数都是返回的新数组的成员
new Array(1, 2) // [1, 2]
new Array('a', 'b', 'c') // ['a', 'b', 'c']
// bad
var arr = new Array(1, 2);
// good
var arr = [1, 2];
// 注意,如果参数是一个正整数,返回数组的成员都是空位.
// 虽然读取的时候返回undefined,但实际上该位置没有任何值.
// 虽然可以取到length属性,但是取不到键名.
var a = new Array(3);
var b = [undefined, undefined, undefined];
a.length // 3
b.length // 3
a[0] // undefined
b[0] // undefined
0 in a // false
0 in b // true
// 上面代码中,a是一个长度为3的空数组,b是一个三个成员都是 undefined 的数组.
