<snippet><description>冻结对象3种方法</description><tabTrigger>std-attr 90 states</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * 有时需要冻结对象的读写状态，防止对象被改变。
     JavaScript 提供了三种冻结方法，
     最弱的一种是 Object.preventExtensions 无法新增
     其次是 Object.seal 无法新增,删除
     最强的是 Object.freeze 无法新增,删除和修改
 */

/**
 * 三种冻结方法的关系
 * 他们时包含关系: preventExtensions > seal > freeze
 */


/**
 * 局限性
 * 1. 上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。
 * 2. 另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。
 */
var obj = new Object();
Object.preventExtensions(obj);

var proto = Object.getPrototypeOf(obj);
proto.t = 'hello';
obj.t
// hello

// 上面代码中，对象obj本身不能新增属性，但是可以在它的原型对象上新增属性，就依然能够在obj上读到。

// 一种解决方案是，把obj的原型也冻结住。
var obj = new Object();
Object.preventExtensions(obj);
var proto = Object.getPrototypeOf(obj);
Object.preventExtensions(proto);

proto.t = 'hello';
obj.t // undefined

// 2. 如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。
var obj = {
  foo: 1,
  bar: ['a', 'b']
};
Object.freeze(obj);

obj.bar.push('c');
obj.bar // ["a", "b", "c"]

// 上面代码中，obj.bar属性指向一个数组，obj对象被冻结以后，这个指向无法改变，即无法指向其他值，但是所指向的数组是可以改变的。
]]></content></snippet>