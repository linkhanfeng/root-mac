---
description: 存取器
tabTrigger:  std-attr 70 getter&setter
scope:       source.js
---
/**
 * 存取器
 除了直接定义以外，属性还可以用存取器（accessor）定义。其中，
    存值函数称为setter，使用属性描述对象的set属性；
    取值函数称为getter，使用属性描述对象的get属性。
    一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如某个属性禁止赋值。
 */
var obj = Object.defineProperty({}, 'p', {
  get: function () {
    return 'getter';
  },
  set: function (value) {
    console.log('setter: ' + value);
  }
});

obj.p // "getter"
obj.p = 123 // "setter: 123"
obj.a = 111​
obj // {a: 111, p: Getter & Setter}
// 上面代码中，obj.p定义了get和set属性。obj.p取值时，就会调用get；赋值时，就会调用set。


/**
 * JavaScript 还提供了存取器的另一种写法。
     上面的写法与定义属性描述对象是等价的，而且使用更广泛。
     注意，取值函数get不能接受参数，存值函数set只能接受一个参数（即属性的值）。
 */
var obj = {
  get p() {
    return 'getter';
  },
  set p(value) {
    console.log('setter: ' + value);
  }
};

/**
 * 存取器往往用于，属性的值依赖对象内部数据的场合。
     this 指向对象本身
   下面代码中，next属性的存值函数和取值函数，都依赖于内部属性 p。
 */
var obj ={
  p : 5,
  get next() { return this.p++ },
  set next(n) {
    if (n >= this.p) this.p = n;
    else throw new Error('新的值必须大于当前值(即:obj.next的值)');
  }
};

obj.next // 5
obj.next = 10;
obj.next // 10
obj.next = 5;
// Uncaught Error: 新的值必须大于当前值
