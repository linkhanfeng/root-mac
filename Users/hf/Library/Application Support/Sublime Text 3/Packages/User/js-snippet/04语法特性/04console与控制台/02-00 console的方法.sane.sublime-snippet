<snippet><description>console 的9个静态方法</description><tabTrigger>gra-console 20 funs</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * console对象提供的各种静态方法，用来与控制台窗口互动。
 * 共有 9 种方法
    console.log()，console.info()，console.debug()
    console.warn()，console.error()
    console.table()
    console.count()
    console.dir()，console.dirxml()
    console.assert()
    console.time()，console.timeEnd()
    console.group()，console.groupEnd()，console.groupCollapsed()
    console.trace()，console.clear()
 */

/**
 * 1. console.log() info() debueg()
 * 1.1 第一个参数是格式字符串时,支持6种格式
     %s 字符串, %d 整数, %i 整数
     %f 浮点数, %o 对象的链接, %c CSS 格式字符串

 * 1.2 console对象的所有方法，都可以被覆盖。因此，可以按照自己的需要，定义console.log方法。

 * 1.3 console.info是console.log方法的别名，用法完全一样。
     只不过console.info方法会在输出信息的前面，加上一个蓝色图标。
 * console.debug方法与console.log方法类似，会在控制台输出调试信息。
     但是，默认情况下，console.debug输出的信息不会显示，只有在打开显示级别在verbose的情况下，才会显示。
 */
console.log('%s 的分数是: %d', '小明', 60) // 小明 的分数是: 60

// 使用 %c 占位符时，对应的参数必须是 CSS 代码，用来对输出内容进行 CSS 渲染。
console.log('%c我时红色', 'color:#f00; font-size:20px;') // 20像素红色字体

// 自定义 console.log 方法
['log', 'info', 'warn', 'error'].forEach(function(method) {
  console[method] = console[method].bind(
    console,
    new Date().toISOString() // 添加时间信息
  );
});
console.log("出错了！"); // 2014-05-18T09:00.000Z 出错了！


/**
 * 2. console.warn()
 * warn方法和error方法也是在控制台输出信息，它们与log方法的不同之处在于，
     warn方法输出信息时，在最前面加一个黄色三角，表示警告
     error方法输出信息时，在最前面加一个红色的叉，表示出错。
     同时，还会高亮显示输出文字和错误发生的堆栈。 其他方面都一样。
 * 可以这样理解，log方法是写入标准输出（stdout），warn方法和error方法是写入标准错误（stderr）。
 */
console.error('Error: %s (%i)', 'Server is not responding', 500)
// Error: Server is not responding (500)
console.warn('Warning! Too few nodes (%d)', document.childNodes.length)
// Warning! Too few nodes (1)

/**
 * 3. console.table()
 * 对于某些复合类型的数据，console.table 方法可以将其转为表格显示。
 */
var languages = [
  { name: "JavaScript", fileExtension: ".js" },
  { name: "TypeScript", fileExtension: ".ts" },
  { name: "CoffeeScript", fileExtension: ".coffee" }
];
console.table(languages); // 会以表格的形式显示

/**
 * 4. console.count()
 * 用于计数，输出它被调用了多少次。
 * 该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类统计。
 */

function greet(user) {
  console.count();
  return 'hi ' + user;
}
greet('bob') //  default: 1 // "hi bob"
greet('alice') //  default: 2 // "hi alice"
greet('bob') //  default: 3 // "hi bob"

// 下面代码根据参数的不同，显示bob执行了两次，alice执行了一次。
function greet(user) {
  console.count(user);
  return "hi " + user;
}
greet('bob') // bob: 1 // "hi bob"
greet('alice') // alice: 1 // "hi alice"
greet('bob') // bob: 2 // "hi bob"

/**
 * 5. console.dir()
    dir方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。
    dir比log方法更易读，信息也更丰富。 实际操作起来: 和 log 差别很小
 * 该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。
    console.dir(document.body)
 * dirxml方法主要用于以目录树的形式，显示 DOM 节点。
    console.dirxml(document.body)
 */

/**
 * 6. console.assert()
 * 方法主要用于程序运行过程中，进行条件判断，
   如果不满足条件，就显示一个错误，但不会中断程序执行。这样就相当于提示用户，内部状态不正确。
 */
console.assert(document.head > 3, '节点个数大于 3个')
// Assertion failed: 节点个数大于 3个

/**
 * 7. console.time(), timeEnd()
 * 这两个方法用于计时，可以算出一个操作所花费的准确时间。
    time方法表示计时开始，timeEnd方法表示计时结束。
    它们的参数是计时器的名称。
    调用timeEnd方法之后，控制台会显示“计时器名称: 所耗费的时间”。
 */
console.time('Array initialize');

var array= new Array(1000000);
for (var i = array.length - 1; i >= 0; i--) {
  array[i] = new Object();
};

console.timeEnd('Array initialize'); // Array initialize: 1058ms

/**
 * 8. console.group()，console.groupEnd()，console.groupCollapsed()
 * console.group和console.groupEnd这两个方法用于将显示的信息分组。
       它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。
 * console.groupCollapsed 方法与console.group方法很类似，
   唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。
 */
console.group('一级分组');
console.log('一级分组的内容');
console.group('二级分组');
console.log('二级分组的内容');

console.groupEnd(); // 二级分组结束
console.groupEnd(); // 一级分组结束

console.groupCollapsed('Fetching Data');
console.log('Request Sent');
console.error('Error: Server not responding (500)');
console.groupEnd(); // 分组结束

/**
 * 9. console.trace()
 * 方法显示当前执行的代码在堆栈中的调用路径。
 * console.clear方法用于清除当前控制台的所有输出，将光标回置到第一行。
   如果用户选中了控制台的“Preserve log”选项，console.clear方法将不起作用。
 */
console.trace()
console.clear() // 清屏
]]></content></snippet>