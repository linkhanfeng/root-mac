<snippet><description>自定义方法</description><tabTrigger>std-num 40 customize</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * 与其他对象一样,Number.prototype对象下面可以自定义方法,被Number的实例继承.
 */
Number.prototype.add = function (x) {
  return this + x;
};
8['add'](2) // 10
// 由于add方法返回的还是数值,所以可以链式运算.
Number.prototype.subtract = function (x) {
  return this - x;
};
(8).add(2).subtract(4)
// 6
// 我们还可以部署更复杂的方法.
Number.prototype.iterate = function () {
  var result = [];
  for (var i = 0; i <= this; i++) {
    result.push(i);
  }
  return result;
};
(8).iterate()
// [0, 1, 2, 3, 4, 5, 6, 7, 8]
// 注意,数值的自定义方法,只能定义在它的原型对象Number.prototype下面,
// 数值本身是无法自定义属性的.
// 这是因为一旦被调用属性,n就自动转为Number的实例对象,调用结束后,该对象自动销毁.
// 所以,下一次调用n的属性时,实际取到的是另一个对象,属性x当然就读不出来.
var n = 1;
n.x = 1;
n.x // undefined
]]></content></snippet>