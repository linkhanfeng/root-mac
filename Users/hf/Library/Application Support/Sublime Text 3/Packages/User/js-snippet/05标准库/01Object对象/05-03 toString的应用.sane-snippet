---
description: toString优于typeof
tabTrigger:  std-obj 53 toString
scope:       source.js
---
/**
 * toString 可以比 typeof 更准确的判断数据类型
     Object.prototype.toString方法返回对象的类型字符串，因此可以用来判断一个值的类型。
 * 由于实例对象可能会自定义toString方法，覆盖掉Object.prototype.toString方法，
     所以为了得到类型字符串，最好直接使用Object.prototype.toString方法。
     通过函数的call方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。
 */
var obj = {};
obj.toString() // "[object Object]" 第二个Object表示该值的构造函数。
Object.prototype.toString.call(obj) // "[object Object]"

/**
 * 不同数据类型的Object.prototype.toString方法返回值如下。
    数值：返回[object Number]。
    字符串：返回[object String]。
    布尔值：返回[object Boolean]。
    undefined：返回[object Undefined]。
    null：返回[object Null]。
    数组：返回[object Array]。
    arguments 对象：返回[object Arguments]。
    函数：返回[object Function]。
    Error 对象：返回[object Error]。
    Date 对象：返回[object Date]。
    RegExp 对象：返回[object RegExp]。
    其他对象：返回[object Object]。
 */

/**
 * 可以写出一个比typeof运算符更准确的类型判断函数
     获取数据类型 type()
     判断数据类型 type.isArray()
 */
var type = function (o){
  var s = Object.prototype.toString.call(o);
  return s.match(/\[object (.*?)\]/)[1].toLowerCase();
};

['Null', 'Undefined', 'Object', 'Array', 'String',
'Number', 'Boolean', 'Function', 'RegExp'].forEach(function (t) {
  type['is' + t] = function (o) {
    return type(o) === t.toLowerCase();
  };
});

type({}); // "object"
type([]); // "array"
type(5); // "number"
type(null); // "null"
type(); // "undefined"
type(/abcd/); // "regex"
type(new Date()); // "date"

type.isObject({}) // true
type.isNumber(NaN) // true
type.isRegExp(/abc/) // true
