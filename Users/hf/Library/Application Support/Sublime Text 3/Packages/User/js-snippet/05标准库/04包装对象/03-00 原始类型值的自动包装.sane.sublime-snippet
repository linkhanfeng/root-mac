<snippet><description>原始类型值的自动包装</description><tabTrigger>std-warp 30 auto warp</tabTrigger><scope>source.js</scope><content><![CDATA[
/**
 * 原始类型的值,可以自动当作包装对象调用,即调用包装对象的属性和方法.
      这时,js 引擎会自动将原始类型的值转为包装对象实例,在使用后立刻销毁实例.
 * 比如:下面代码中.
      str是一个字符串,本身不是对象,不能调用length属性.
      JavaScript 引擎自动将其转为包装对象,在这个对象上调用length属性.
      调用结束后,这个临时对象就会被销毁.
      这就叫原始类型与实例对象的自动转换.
 */
var str = 'abc';
str.length // 3
// 等同于
var strObj = new String(str) // String { 0: "a", 1: "b", 2: "c", length: 3 }
strObj.length // 3

/**
 * 自动转换生成的包装对象无法修改, 原因有两方面
 * 一方面自动转换生成的包装对象是只读的,无法修改.所以,字符串无法添加新属性.
      下面代码为字符串s添加了一个x属性,结果无效,总是返回undefined.
 * 另一方面,调用结束后,包装对象实例会自动销毁.
      这意味着,下一次调用字符串的属性时,实际是调用一个新生成的对象,
      而不是上一次调用时生成的那个对象,所以取不到赋值在上一个对象的属性.
 * 如果想修改,只有在它的原型对象String.prototype上定义,参见下一节"自定义方法"
 */
//
var s = 'Hello World';
s.x = 123; // 123
s.x // undefined
]]></content></snippet>